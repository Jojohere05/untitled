#include <stdio.h>
#include <stdlib.h>

// Node structure for singly linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the end of the list
void insert(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    if (*head == NULL) {
        *head = newNode; // If the list is empty, the new node becomes the head
    } else {
        struct Node* temp = *head;
        while (temp->next != NULL) {
            temp = temp->next; // Traverse to the last node
        }
        temp->next = newNode; // Insert the new node at the end
    }
}

// Function to concatenate two lists
void concatenate(struct Node** head1, struct Node* head2) {
    if (*head1 == NULL) {
        *head1 = head2; // If the first list is empty, make the second list the head
    } else {
        struct Node* temp = *head1;
        while (temp->next != NULL) {
            temp = temp->next; // Traverse to the last node of the first list
        }
        temp->next = head2; // Link the second list to the end of the first list
    }
}

// Function to display the list
void display(struct Node* head) {
    if (head == NULL) {
        printf("List is empty.\n");
        return;
    }
    struct Node* temp = head;
    printf("List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

// Main function with menu
int main() {
    struct Node* list1 = NULL; // Initially the first list is empty
    struct Node* list2 = NULL; // Initially the second list is empty
    int choice, data;

    while (1) {
        printf("\nMenu:\n");
        printf("1. Create first list\n");
        printf("2. Create second list\n");
        printf("3. Insert into first list\n");
        printf("4. Insert into second list\n");
        printf("5. Concatenate lists\n");
        printf("6. Display first list\n");
        printf("7. Display second list\n");
        printf("8. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                list1 = NULL; // Reset list1
                printf("First list created.\n");
                break;
            case 2:
                list2 = NULL; // Reset list2
                printf("Second list created.\n");
                break;
            case 3:
                printf("Enter data to insert into first list: ");
                scanf("%d", &data);
                insert(&list1, data);
                printf("Inserted %d into first list.\n", data);
                break;
            case 4:
                printf("Enter data to insert into second list: ");
                scanf("%d", &data);
                insert(&list2, data);
                printf("Inserted %d into second list.\n", data);
                break;
            case 5:
                concatenate(&list1, list2);
                printf("Lists concatenated.\n");
                break;
            case 6:
                display(list1);
                break;
            case 7:
                display(list2);
                break;
            case 8:
                exit(0);
            default:
                printf("Invalid choice. Try again.\n");
        }
    }

    return 0;
}
